// Импортируем необходимые классы:
import java.util.Scanner; // Для чтения ввода с консоли
import java.util.regex.Pattern; // Для работы с регулярными выражениями (шаблонами)
import java.util.regex.Matcher; // Для поиска соответствий регулярным выражениям

class CalculatorSimple {
    // Основной метод вычисления, который может выбросить исключение
    public static String calc(String input) throws Exception {
        // Удаляем все пробелы из входной строки для упрощения обработки
        // Например, "1 + 2" становится "1+2"
        String expr = input.replaceAll(" ", "");

        // Создаем шаблон регулярного выражения для проверки формата:
        // ^ - начало строки
        // (\\d+) - первая группа (одно или более цифр) - первое число
        // ([-+*/]) - вторая группа (один из операторов: +, -, *, /)
        // (\\d+) - третья группа (одно или более цифр) - второе число
        // $ - конец строки
        Pattern pattern = Pattern.compile("^(\\d+)([-+*/])(\\d+)$");

        // Создаем объект Matcher для поиска соответствия шаблону в строке
        Matcher matcher = pattern.matcher(expr);

        // Проверяем, соответствует ли строка шаблону
        if (!matcher.matches()) {
            // Если нет - выбрасываем исключение с пояснением
            throw new Exception("Некорректный формат ввода. Пример: 2+3 или 10 / 2");
        }

        // Объявляем переменные для хранения чисел
        int a, b;
        try {
            // Пытаемся преобразовать первую группу (число) в int
            a = Integer.parseInt(matcher.group(1));
            // Пытаемся преобразовать третью группу (число) в int
            b = Integer.parseInt(matcher.group(3));
        } catch (NumberFormatException e) {
            // Если преобразование не удалось (например, число слишком большое)
            throw new Exception("Числа должны быть целыми");
        }

        // Проверяем, что числа находятся в допустимом диапазоне (1-10)
        if (a < 1 || a > 10 || b < 1 || b > 10) {
            throw new Exception("Числа должны быть от 1 до 10 включительно");
        }

        // Получаем оператор (вторая группа в регулярном выражении)
        String op = matcher.group(2);

        // Переменная для хранения результата вычисления
        int result;

        // Выбираем операцию в зависимости от оператора
        switch (op) {
            case "+":
                result = a + b; // Сложение
                break;
            case "-":
                result = a - b; // Вычитание
                break;
            case "*":
                result = a * b; // Умножение
                break;
            case "/":
                result = a / b; // Целочисленное деление (остаток отбрасывается)
                break;
            default:
                // Этот случай теоретически невозможен из-за проверки регулярным выражением
                throw new Exception("Неподдерживаемая операция: " + op);
        }

        // Преобразуем результат в строку и возвращаем
        return String.valueOf(result);
    }

    // Главный метод программы
    public static void main(String[] args) {
        // Используем try-with-resources для автоматического закрытия Scanner
        // Это гарантирует, что ресурсы будут освобождены, даже если произойдет ошибка
        try (Scanner scanner = new Scanner(System.in)) {
            // Выводим инструкции для пользователя
            System.out.println("Введите выражение (например: 3 + 5 или 10-3):");
            System.out.print("> "); // Приглашение ко вводу

            // Читаем всю строку ввода
            String input = scanner.nextLine();

            try {
                // Вызываем метод вычисления и получаем результат
                String result = calc(input);
                // Выводим результат
                System.out.println("Результат: " + result);
            } catch (Exception e) {
                // Обрабатываем возможные ошибки вычисления
                // Используем System.err для вывода ошибок (красный цвет в консоли)
                System.err.println("Ошибка: " + e.getMessage());
            }
        }
        // Scanner автоматически закрывается здесь благодаря try-with-resources
    }
}

